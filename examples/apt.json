{
  "ansible.builtin.apt": {
    "doc": {
      "attributes": {
        "check_mode": {
          "description": "Can run in check_mode and return changed status prediction without modifying target, if not supported the action will be skipped.",
          "support": "full"
        },
        "diff_mode": {
          "description": "Will return details on what has changed (or possibly needs changing in check_mode), when in diff mode",
          "support": "full"
        },
        "platform": {
          "description": "Target OS/families that can be operated against",
          "platforms": "debian",
          "support": "N/A"
        }
      },
      "author": "Matthew Williams (@mgwilliams)",
      "collection": "ansible.builtin",
      "description": [
        "Manages I(apt) packages (such as for Debian/Ubuntu)."
      ],
      "filename": "/nix/store/c0vs0m5xk6bs53w1m120gwhj4xqp883x-python3.12-ansible-core-2.18.4/lib/python3.12/site-packages/ansible/modules/apt.py",
      "has_action": false,
      "module": "apt",
      "notes": [
        "Three of the upgrade modes (V(full), V(safe) and its alias V(true)) required C(aptitude) up to 2.3, since 2.4 C(apt-get) is used as a fall-back.",
        "In most cases, packages installed with I(apt) will start newly installed services by default. Most distributions have mechanisms to avoid this. For example when installing Postgresql-9.5 in Debian 9, creating an executable shell script (/usr/sbin/policy-rc.d) that throws a return code of 101 will stop Postgresql 9.5 starting up after install. Remove the file or its execute permission afterward.",
        "The C(apt-get) commandline supports implicit regex matches here but we do not because it can let typos through easier (If you typo C(foo) as C(fo) apt-get would install packages that have \"fo\" in their name with a warning and a prompt for the user. Since there are no warnings and prompts before installing, we disallow this. Use an explicit fnmatch pattern if you want wildcarding).",
        "When used with a C(loop:) each package will be processed individually, it is much more efficient to pass the list directly to the O(name) option.",
        "When O(default_release) is used, an implicit priority of 990 is used. This is the same behavior as C(apt-get -t).",
        "When an exact version is specified, an implicit priority of 1001 is used.",
        "If the interpreter can't import C(python-apt)/C(python3-apt) the module will check for it in system-owned interpreters as well. If the dependency can't be found, the module will attempt to install it. If the dependency is found or installed, the module will be respawned under the correct interpreter."
      ],
      "options": {
        "allow_change_held_packages": {
          "default": "no",
          "description": [
            "Allows changing the version of a package which is on the apt hold list."
          ],
          "type": "bool",
          "version_added": "2.13",
          "version_added_collection": "ansible.builtin"
        },
        "allow_downgrade": {
          "aliases": [
            "allow-downgrade",
            "allow_downgrades",
            "allow-downgrades"
          ],
          "default": "no",
          "description": [
            "Corresponds to the C(--allow-downgrades) option for I(apt).",
            "This option enables the named package and version to replace an already installed higher version of that package.",
            "Note that setting O(allow_downgrade=true) can make this module behave in a non-idempotent way.",
            "(The task could end up with a set of packages that does not match the complete list of specified packages to install).",
            "O(allow_downgrade) is only supported by C(apt) and will be ignored if C(aptitude) is detected or specified."
          ],
          "type": "bool",
          "version_added": "2.12",
          "version_added_collection": "ansible.builtin"
        },
        "allow_unauthenticated": {
          "aliases": [
            "allow-unauthenticated"
          ],
          "default": "no",
          "description": [
            "Ignore if packages cannot be authenticated. This is useful for bootstrapping environments that manage their own apt-key setup.",
            "O(allow_unauthenticated) is only supported with O(state): V(install)/V(present)."
          ],
          "type": "bool",
          "version_added": "2.1",
          "version_added_collection": "ansible.builtin"
        },
        "autoclean": {
          "default": "no",
          "description": [
            "If V(true), cleans the local repository of retrieved package files that can no longer be downloaded."
          ],
          "type": "bool",
          "version_added": "2.4",
          "version_added_collection": "ansible.builtin"
        },
        "autoremove": {
          "default": "no",
          "description": [
            "If V(true), remove unused dependency packages for all module states except V(build-dep). It can also be used as the only option.",
            "Previous to version 2.4, O(autoclean) was also an alias for O(autoremove), now it is its own separate command. See documentation for further information."
          ],
          "type": "bool",
          "version_added": "2.1",
          "version_added_collection": "ansible.builtin"
        },
        "cache_valid_time": {
          "default": 0,
          "description": [
            "Update the apt cache if it is older than the O(cache_valid_time). This option is set in seconds.",
            "As of Ansible 2.4, if explicitly set, this sets O(update_cache=yes)."
          ],
          "type": "int"
        },
        "clean": {
          "default": "no",
          "description": [
            "Run the equivalent of C(apt-get clean) to clear out the local repository of retrieved package files. It removes everything but the lock file from C(/var/cache/apt/archives/) and C(/var/cache/apt/archives/partial/).",
            "Can be run as part of the package installation (clean runs before install) or as a separate step."
          ],
          "type": "bool",
          "version_added": "2.13",
          "version_added_collection": "ansible.builtin"
        },
        "deb": {
          "description": [
            "Path to a .deb package on the remote machine.",
            "If C(://) in the path, ansible will attempt to download deb before installing. (Version added 2.1)",
            "Requires the C(xz-utils) package to extract the control file of the deb package to install."
          ],
          "required": false,
          "type": "path",
          "version_added": "1.6",
          "version_added_collection": "ansible.builtin"
        },
        "default_release": {
          "aliases": [
            "default-release"
          ],
          "description": [
            "Corresponds to the C(-t) option for I(apt) and sets pin priorities."
          ],
          "type": "str"
        },
        "dpkg_options": {
          "default": "force-confdef,force-confold",
          "description": [
            "Add C(dpkg) options to C(apt) command. Defaults to C(-o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\").",
            "Options should be supplied as comma separated list."
          ],
          "type": "str"
        },
        "fail_on_autoremove": {
          "default": "no",
          "description": [
            "Corresponds to the C(--no-remove) option for C(apt).",
            "If V(true), it is ensured that no packages will be removed or the task will fail.",
            "O(fail_on_autoremove) is only supported with O(state) except V(absent).",
            "O(fail_on_autoremove) is only supported by C(apt) and will be ignored if C(aptitude) is detected or specified."
          ],
          "type": "bool",
          "version_added": "2.11",
          "version_added_collection": "ansible.builtin"
        },
        "force": {
          "default": "no",
          "description": [
            "Corresponds to the C(--force-yes) to C(apt-get) and implies O(allow_unauthenticated=yes) and O(allow_downgrade=yes).",
            "This option will disable checking both the packages' signatures and the certificates of the web servers they are downloaded from.",
            "This option *is not* the equivalent of passing the C(-f) flag to C(apt-get) on the command line.",
            "**This is a destructive operation with the potential to destroy your system, and it should almost never be used.** Please also see C(man apt-get) for more information."
          ],
          "type": "bool"
        },
        "force_apt_get": {
          "default": "no",
          "description": [
            "Force usage of apt-get instead of aptitude."
          ],
          "type": "bool",
          "version_added": "2.4",
          "version_added_collection": "ansible.builtin"
        },
        "install_recommends": {
          "aliases": [
            "install-recommends"
          ],
          "description": [
            "Corresponds to the C(--no-install-recommends) option for C(apt). V(true) installs recommended packages. V(false) does not install recommended packages. By default, Ansible will use the same defaults as the operating system. Suggested packages are never installed."
          ],
          "type": "bool"
        },
        "lock_timeout": {
          "default": 60,
          "description": [
            "How many seconds will this action wait to acquire a lock on the apt db.",
            "Sometimes there is a transitory lock and this will retry at least until timeout is hit."
          ],
          "type": "int",
          "version_added": "2.12",
          "version_added_collection": "ansible.builtin"
        },
        "name": {
          "aliases": [
            "package",
            "pkg"
          ],
          "description": [
            "A list of package names, like V(foo), or package specifier with version, like V(foo=1.0) or V(foo>=1.0). Name wildcards (fnmatch) like V(apt*) and version wildcards like V(foo=1.0*) are also supported.",
            "Do not use single or double quotes around the version when referring to the package name with a specific version, such as V(foo=1.0) or V(foo>=1.0)."
          ],
          "elements": "str",
          "type": "list"
        },
        "only_upgrade": {
          "default": "no",
          "description": [
            "Only upgrade a package if it is already installed."
          ],
          "type": "bool",
          "version_added": "2.1",
          "version_added_collection": "ansible.builtin"
        },
        "policy_rc_d": {
          "default": null,
          "description": [
            "Force the exit code of C(/usr/sbin/policy-rc.d).",
            "For example, if O(policy_rc_d=101) the installed package will not trigger a service start.",
            "If C(/usr/sbin/policy-rc.d) already exists, it is backed up and restored after the package installation.",
            "If V(null), the C(/usr/sbin/policy-rc.d) is not created/changed."
          ],
          "type": "int",
          "version_added": "2.8",
          "version_added_collection": "ansible.builtin"
        },
        "purge": {
          "default": "no",
          "description": [
            "Will force purging of configuration files if O(state=absent) or O(autoremove=yes)."
          ],
          "type": "bool"
        },
        "state": {
          "choices": [
            "absent",
            "build-dep",
            "latest",
            "present",
            "fixed"
          ],
          "default": "present",
          "description": [
            "Indicates the desired package state. V(latest) ensures that the latest version is installed. V(build-dep) ensures the package build dependencies are installed. V(fixed) attempt to correct a system with broken dependencies in place."
          ],
          "type": "str"
        },
        "update_cache": {
          "aliases": [
            "update-cache"
          ],
          "description": [
            "Run the equivalent of C(apt-get update) before the operation. Can be run as part of the package installation or as a separate step.",
            "Default is not to update the cache."
          ],
          "type": "bool"
        },
        "update_cache_retries": {
          "default": 5,
          "description": [
            "Amount of retries if the cache update fails. Also see O(update_cache_retry_max_delay)."
          ],
          "type": "int",
          "version_added": "2.10",
          "version_added_collection": "ansible.builtin"
        },
        "update_cache_retry_max_delay": {
          "default": 12,
          "description": [
            "Use an exponential backoff delay for each retry (see O(update_cache_retries)) up to this max delay in seconds."
          ],
          "type": "int",
          "version_added": "2.10",
          "version_added_collection": "ansible.builtin"
        },
        "upgrade": {
          "choices": [
            "dist",
            "full",
            "no",
            "safe",
            "yes"
          ],
          "default": "no",
          "description": [
            "If yes or safe, performs an aptitude safe-upgrade.",
            "If full, performs an aptitude full-upgrade.",
            "If dist, performs an apt-get dist-upgrade.",
            "Note: This does not upgrade a specific package, use state=latest for that.",
            "Note: Since 2.4, apt-get is used as a fall-back if aptitude is not present."
          ],
          "type": "str",
          "version_added": "1.1",
          "version_added_collection": "ansible.builtin"
        }
      },
      "plugin_name": "ansible.builtin.apt",
      "requirements": [
        "python-apt (python 2)",
        "python3-apt (python 3)",
        "aptitude (before 2.4)"
      ],
      "short_description": "Manages apt-packages",
      "version_added": "0.0.2",
      "version_added_collection": "ansible.builtin"
    },
    "examples": "\n- name: Install apache httpd (state=present is optional)\n  ansible.builtin.apt:\n    name: apache2\n    state: present\n\n- name: Update repositories cache and install \"foo\" package\n  ansible.builtin.apt:\n    name: foo\n    update_cache: yes\n\n- name: Remove \"foo\" package\n  ansible.builtin.apt:\n    name: foo\n    state: absent\n\n- name: Install the package \"foo\"\n  ansible.builtin.apt:\n    name: foo\n\n- name: Install a list of packages\n  ansible.builtin.apt:\n    pkg:\n    - foo\n    - foo-tools\n\n- name: Install the version '1.00' of package \"foo\"\n  ansible.builtin.apt:\n    name: foo=1.00\n\n- name: Update the repository cache and update package \"nginx\" to latest version using default release squeeze-backport\n  ansible.builtin.apt:\n    name: nginx\n    state: latest\n    default_release: squeeze-backports\n    update_cache: yes\n\n- name: Install the version '1.18.0' of package \"nginx\" and allow potential downgrades\n  ansible.builtin.apt:\n    name: nginx=1.18.0\n    state: present\n    allow_downgrade: yes\n\n- name: Install zfsutils-linux with ensuring conflicted packages (e.g. zfs-fuse) will not be removed.\n  ansible.builtin.apt:\n    name: zfsutils-linux\n    state: latest\n    fail_on_autoremove: yes\n\n- name: Install latest version of \"openjdk-6-jdk\" ignoring \"install-recommends\"\n  ansible.builtin.apt:\n    name: openjdk-6-jdk\n    state: latest\n    install_recommends: no\n\n- name: Update all packages to their latest version\n  ansible.builtin.apt:\n    name: \"*\"\n    state: latest\n\n- name: Upgrade the OS (apt-get dist-upgrade)\n  ansible.builtin.apt:\n    upgrade: dist\n\n- name: Run the equivalent of \"apt-get update\" as a separate step\n  ansible.builtin.apt:\n    update_cache: yes\n\n- name: Only run \"update_cache=yes\" if the last one is more than 3600 seconds ago\n  ansible.builtin.apt:\n    update_cache: yes\n    cache_valid_time: 3600\n\n- name: Pass options to dpkg on run\n  ansible.builtin.apt:\n    upgrade: dist\n    update_cache: yes\n    dpkg_options: 'force-confold,force-confdef'\n\n- name: Install a .deb package\n  ansible.builtin.apt:\n    deb: /tmp/mypackage.deb\n\n- name: Install the build dependencies for package \"foo\"\n  ansible.builtin.apt:\n    pkg: foo\n    state: build-dep\n\n- name: Install a .deb package from the internet\n  ansible.builtin.apt:\n    deb: https://example.com/python-ppq_0.1-1_all.deb\n\n- name: Remove useless packages from the cache\n  ansible.builtin.apt:\n    autoclean: yes\n\n- name: Remove dependencies that are no longer required\n  ansible.builtin.apt:\n    autoremove: yes\n\n- name: Remove dependencies that are no longer required and purge their configuration files\n  ansible.builtin.apt:\n    autoremove: yes\n    purge: true\n\n- name: Run the equivalent of \"apt-get clean\" as a separate step\n  ansible.builtin.apt:\n    clean: yes\n",
    "metadata": null,
    "return": {
      "cache_update_time": {
        "description": "time of the last cache update (0 if unknown)",
        "returned": "success, in some cases",
        "sample": 1425828348000,
        "type": "int"
      },
      "cache_updated": {
        "description": "if the cache was updated or not",
        "returned": "success, in some cases",
        "sample": true,
        "type": "bool"
      },
      "stderr": {
        "description": "error output from apt",
        "returned": "success, when needed",
        "sample": "AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to ...",
        "type": "str"
      },
      "stdout": {
        "description": "output from apt",
        "returned": "success, when needed",
        "sample": "Reading package lists...\nBuilding dependency tree...\nReading state information...\nThe following extra packages will be installed:\n  apache2-bin ...",
        "type": "str"
      }
    }
  }
}

